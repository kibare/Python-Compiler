Terminals:
+ - * / % ( ) [ ] ^ and or number variable is ! not = > < true false string ' " if elif else : print input str float int double def break return while for in range class import as from return raise len range , pass continue with open
Variables:
Expr Term AddOp MulOp Factor Primary
Productions:
S -> S S | VAR ASSIGNOPS VV | IF | PRINT | WHILE | FOR | DEF | CLASS | IMPORT | FROM | COMMENT | ARRAY
VV -> VAR | VAL | VV OPS VV | INPUT | VV , VV | METHOD;
VAR -> variable;
VAL -> number | VV OPS VV | VV * * VV | VV / / VV | ( VV ) | BOOL | STRING;
ASSIGNOPS -> = | + = | - = | * = | / = | % =;
RELATION -> > | < | = = | ! = | < = | > =;
BOOL -> true | false | BOOL and BOOL | BOOL or BOOL | not BOOL | VV is VV | VV RELATION VV;
OPS -> + | - | * | / | %;
STRING -> " string " | ' string ' | STRING + STRING;
CONTENT -> VAR | CONTENT CONTENT;
COMMENT -> " " " CONTENT " " " | ' ' ' CONTENT ' ' ';
INBRACKET -> ( VV ) | ( );
PRINT -> print INBRACKET;
EXPR -> ( BOOL ) : S | BOOL : S;
RAISE -> raise INBRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
IF -> if EXPR | IF ELIF | IF ELSE | IF RAISE | IF BREAK | IF PASS | IF CONTINUE;
ELIF -> elif EXPR | ELIF ELIF | ELIF ELSE;
ELSE -> else : S;
TYPE -> str | float | int | double;
INPUT -> input INBRACKET | TYPE ( INPUT );
RANGE -> range INBRACKET;
WHILE -> while EXPR;
FOR -> for VAR in STRING : S | for VAR in RANGE : S;
RETURN -> return BOOL | return VAL | return VAR;
DEF -> def VAR ARGS : S | DEF RETURN;
ARGS -> ( ARG ) | ( );
ARG -> DEFAULTARG , ARG | DEFAULTARG;
DEFAULTARG -> VAR = VAL | VAR;
CLASS -> class VAR : S;
IMPORT -> import VAR as VAR | import VAR;
FROM -> from VAR IMPORT;
METHOD -> len INBRACKET | with open INBRACKET as VAR;
ARRAY -> [ VV ] | [ ]